#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import requests
import datetime
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
from openpyxl import Workbook, load_workbook

# ===== –ö–æ–Ω—Ñ–∏–≥ =====
BOT_TOKEN = os.environ.get("BOT_TOKEN", "")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ Render/Env
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))  # –≤–∞—à Telegram ID (—á–∏—Å–ª–æ)
FILE_NAME = "calculations.xlsx"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PRICE, ENGINE, YEAR, DELIVERY, FREIGHT, BROKER = range(6)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
    # –Ω–µ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –≤ –ª–æ–≥–∞—Ö

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def get_jpy_rate():
    """
    –ë–µ—Ä—ë—Ç –∫—É—Ä—Å JPY (1 –π–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö) —Å –¶–ë –†–§.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç float –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    urls = [
        "https://www.cbr-xml-daily.ru/daily_json.js",
        "https://www.cbr.ru/scripts/XML_daily.asp"  # —Ä–µ–∑–µ—Ä–≤ (–Ω–µ json) - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]
    try:
        r = requests.get(urls[0], timeout=8)
        r.raise_for_status()
        data = r.json()
        val = data.get("Valute", {}).get("JPY", {}).get("Value")
        if val is None:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω JPY –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë.")
            return None
        return float(val)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¶–ë: %s", e)
        return None

def save_to_excel(row):
    """
    row - —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —à–∞–ø–∫–µ.
    –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —à–∞–ø–∫—É.
    """
    header = [
        "–î–∞—Ç–∞", "–¶–µ–Ω–∞ ¬•", "–ö—É—Ä—Å ¬•", "–¶–µ–Ω–∞ ‚ÇΩ",
        "–î–≤–∏–≥–∞—Ç–µ–ª—å (—Å–º¬≥)", "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", "–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)",
        "–î–æ—Å—Ç–∞–≤–∫–∞ ‚ÇΩ", "–§—Ä–∞—Ö—Ç ‚ÇΩ", "–ü–æ—à–ª–∏–Ω–∞ ‚ÇΩ", "–£—Ç–∏–ª—å—Å–±–æ—Ä ‚ÇΩ",
        "–ù–î–° ‚ÇΩ", "–ë—Ä–æ–∫–µ—Ä ‚ÇΩ", "–ò—Ç–æ–≥–æ ‚ÇΩ"
    ]
    try:
        if not os.path.exists(FILE_NAME):
            wb = Workbook()
            ws = wb.active
            ws.append(header)
            wb.save(FILE_NAME)

        wb = load_workbook(FILE_NAME)
        ws = wb.active
        ws.append(row)
        wb.save(FILE_NAME)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: %s", e)

def calc_customs(price_rub, age, engine_cc):
    """
    –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ –ø–æ—à–ª–∏–Ω—ã, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏ –≤—ã—à–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple: (duty, util_fee, vat)
    –í–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
    """
    if age < 3:
        duty = price_rub * 0.48  # 48% –æ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ‚Äî –ø—Ä–∏–º–µ—Ä
    else:
        cc = engine_cc
        if cc <= 1000:
            duty = cc * 1.5 * 100
        elif cc <= 1500:
            duty = cc * 1.7 * 100
        elif cc <= 1800:
            duty = cc * 2.5 * 100
        elif cc <= 2300:
            duty = cc * 2.7 * 100
        elif cc <= 3000:
            duty = cc * 3.0 * 100
        else:
            duty = cc * 3.6 * 100

    util_fee = 5200 if age < 3 else 8200
    vat = (price_rub + duty) * 0.2  # 20% –ù–î–°
    return duty, util_fee, vat

# ===== HANDLERS =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –≤ –π–µ–Ω–∞—Ö.
    """
    rate = get_jpy_rate()
    if rate:
        context.user_data['rate'] = rate
        await update.message.reply_text(
            f"üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 ¬• = {rate:.4f} ‚ÇΩ\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ (–≤ –π–µ–Ω–∞—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 1200000"
        )
        return PRICE
    else:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å, –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—ë–º –≤–≤–æ–¥–∏—Ç—å —Ü–µ–Ω—É, –Ω–æ —Å–æ–æ–±—â–∞–µ–º
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –π–µ–Ω—ã —Å –¶–ë. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ (–≤ –π–µ–Ω–∞—Ö),\n"
            "–∏ –∑–∞—Ç–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –≤–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é (–≤ —Ä—É–±–ª—è—Ö –∑–∞ 1 ¬•)."
        )
        context.user_data['rate'] = None
        return PRICE

async def price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().replace(",", "").replace(" ", "")
    try:
        price_yen = float(text)
        context.user_data['price_yen'] = price_yen
        # –µ—Å–ª–∏ –∫—É—Ä—Å–∞ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
        if context.user_data.get('rate') is None:
            await update.message.reply_text("–í–≤–µ–¥–∏ –∫—É—Ä—Å –π–µ–Ω—ã –∫ —Ä—É–±–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.6123):")
            return YEAR  # –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ—Ç YEAR –¥–ª—è –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ —Å–º¬≥), –Ω–∞–ø—Ä–∏–º–µ—Ä: 1798")
            return ENGINE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚Äî —Ü–µ–Ω—É –≤ –π–µ–Ω–∞—Ö.")
        return PRICE

async def year_as_rate_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Ä—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é. –î–∞–ª–µ–µ –ø–æ–ø—Ä–æ—Å–∏–º –º–æ—Ç–æ—Ä/–≥–æ–¥.
    """
    text = update.message.text.strip().replace(",", ".")
    try:
        rate = float(text)
        context.user_data['rate'] = rate
        await update.message.reply_text("–í–≤–µ–¥–∏ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ —Å–º¬≥), –Ω–∞–ø—Ä–∏–º–µ—Ä: 1798")
        return ENGINE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚Äî –∫—É—Ä—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0.6123")
        return YEAR

async def engine_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        cc = int(text)
        context.user_data['engine_cc'] = cc
        await update.message.reply_text("–í–≤–µ–¥–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2018):")
        return YEAR
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ —Å–º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1798).")
        return ENGINE

async def year_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        year = int(text)
        current_year = datetime.datetime.now().year
        if year > current_year or year < 1980:
            await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏ –≥–æ–¥ –æ—Ç 1980 –¥–æ {current_year}.")
            return YEAR
        context.user_data['year'] = year
        context.user_data['age'] = current_year - year
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø–æ—Ä—Ç –Ø–ø–æ–Ω–∏–∏ (–≤ —Ä—É–±–ª—è—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 25000")
        return DELIVERY
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2018).")
        return YEAR

async def delivery_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().replace(",", ".").replace(" ", "")
    try:
        context.user_data['delivery'] = float(text)
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—Ä–∞—Ö—Ç–∞ –¥–æ –†–æ—Å—Å–∏–∏ (–≤ —Ä—É–±–ª—è—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 45000")
        return FREIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ä—É–±–ª–∏).")
        return DELIVERY

async def freight_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().replace(",", ".").replace(" ", "")
    try:
        context.user_data['freight'] = float(text)
        await update.message.reply_text("–í–≤–µ–¥–∏ —É—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 15000")
        return BROKER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ä—É–±–ª–∏).")
        return FREIGHT

async def broker_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().replace(",", ".").replace(" ", "")
    try:
        broker_fee = float(text)
        ctx = context.user_data
        # –æ—Å–Ω–æ–≤–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
        price_yen = ctx['price_yen']
        rate = ctx['rate']
        price_rub = price_yen * rate  # —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö

        duty, util_fee, vat = calc_customs(price_rub, ctx['age'], ctx['engine_cc'])

        delivery = ctx.get('delivery', 0.0)
        freight = ctx.get('freight', 0.0)
        total = price_rub + delivery + freight + duty + util_fee + vat + broker_fee

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        save_row = [
            datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            price_yen, rate, round(price_rub, 2),
            ctx['engine_cc'], ctx['year'], ctx['age'],
            delivery, freight, round(duty, 2), util_fee, round(vat, 2),
            broker_fee, round(total, 2)
        ]
        save_to_excel(save_row)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
        breakdown = (
            "üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—á—ë—Ç:*\n\n"
            f"üí¥ –¶–µ–Ω–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ: {price_yen:,.0f} ¬• √ó {rate:.4f} ‚ÇΩ = {price_rub:,.0f} ‚ÇΩ\n"
            f"üö¢ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç –Ø–ø–æ–Ω–∏–∏: {delivery:,.0f} ‚ÇΩ\n"
            f"‚õ¥ –§—Ä–∞—Ö—Ç –¥–æ –†–æ—Å—Å–∏–∏: {freight:,.0f} ‚ÇΩ\n"
            f"üíº –ü–æ—à–ª–∏–Ω–∞: {duty:,.0f} ‚ÇΩ\n"
            f"‚ôªÔ∏è –£—Ç–∏–ª—å—Å–±–æ—Ä: {util_fee:,.0f} ‚ÇΩ\n"
            f"üí∞ –ù–î–° (20%): {vat:,.0f} ‚ÇΩ\n"
            f"üìë –£—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞: {broker_fee:,.0f} ‚ÇΩ\n\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ: {ctx['age']} –ª–µ—Ç\n"
            f"üíµ *–ò—Ç–æ–≥–æ*: {total:,.0f} ‚ÇΩ"
        )

        await update.message.reply_text(breakdown, parse_mode="Markdown")
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ä—É–±–ª–∏).")
        return BROKER
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ broker_input: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç calculations.xlsx —Ç–æ–ª—å–∫–æ ADMIN_ID.
    """
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not os.path.exists(FILE_NAME):
        await update.message.reply_text("–§–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    try:
        # —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await context.bot.send_document(chat_id=update.effective_chat.id, document=open(FILE_NAME, "rb"))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# ===== Main =====
def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_input)],
            ENGINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, engine_input)],
            YEAR: [
                MessageHandler(filters.Regex(r'^\d+(\.\d+)?$') & ~filters.COMMAND, year_as_rate_input),  # –µ—Å–ª–∏ –≤–≤–æ–¥ –∫—É—Ä—Å–∞ (–∫–æ–≥–¥–∞ rate –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω)
                MessageHandler(filters.TEXT & ~filters.COMMAND, year_input)
            ],
            DELIVERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_input)],
            FREIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, freight_input)],
            BROKER: [MessageHandler(filters.TEXT & ~filters.COMMAND, broker_input)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("export", export_excel))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()

if __name__ == "__main__":
    main()
