import os
import re
import logging
import tempfile
from datetime import datetime

import requests
import pandas as pd
import xml.etree.ElementTree as ET

from telegram import Update, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

PRICE, ENGINE, YEAR = range(3)

# ‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import os
from telegram import Bot

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN)  # <-- –Ω–µ –º–µ–Ω—è–ª –ø–æ –ø—Ä–æ—Å—å–±–µ

def get_yen_rate(default_rate: float = 0.65) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –π–µ–Ω—ã (—Ä—É–±–ª–µ–π –∑–∞ 1 –π–µ–Ω—É) —Å —Å–∞–π—Ç–∞ –¶–ë –†–§.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç default_rate.
    """
    url = "https://www.cbr.ru/scripts/XML_daily.asp"
    try:
        resp = requests.get(url, timeout=5)
        resp.raise_for_status()
        # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        resp.encoding = resp.apparent_encoding or "windows-1251"
        xml_text = resp.text

        root = ET.fromstring(xml_text)
        for valute in root.findall("Valute"):
            code = valute.findtext("CharCode")
            if code and code.upper() == "JPY":
                value_text = valute.findtext("Value")
                nominal_text = valute.findtext("Nominal")
                if value_text is None:
                    continue
                # value like "546,1234" -> "546.1234"
                value = float(value_text.replace(",", "."))
                nominal = int(nominal_text) if nominal_text and nominal_text.isdigit() else 1
                # –¶–ë –¥–∞—ë—Ç –∫—É—Ä—Å –∑–∞ Nominal –µ–¥–∏–Ω–∏—Ü, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º
                rate_per_yen = value / nominal
                return rate_per_yen
        # –ï—Å–ª–∏ JPY –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî fallback
        logger.warning("JPY not found in CBR response; using fallback rate")
        return default_rate
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –π–µ–Ω—ã: %s", e)
        return default_rate

def calc_customs(price_yen: float, engine_cc: int, year: int) -> dict:
    rate = get_yen_rate()
    price_rub = price_yen * rate
    current_year = datetime.now().year
    age = current_year - year

    # –ü–æ—à–ª–∏–Ω–∞
    if age < 3:
        duty = max(price_rub * 0.48, engine_cc * 3.5)
    elif 3 <= age <= 5:
        if engine_cc <= 1000:
            duty = engine_cc * 1.5
        elif engine_cc <= 1500:
            duty = engine_cc * 1.7
        elif engine_cc <= 1800:
            duty = engine_cc * 2.5
        elif engine_cc <= 2300:
            duty = engine_cc * 2.7
        elif engine_cc <= 3000:
            duty = engine_cc * 3.0
        else:
            duty = engine_cc * 3.6
    else:
        if engine_cc <= 1000:
            duty = engine_cc * 3.0
        elif engine_cc <= 1500:
            duty = engine_cc * 3.2
        elif engine_cc <= 1800:
            duty = engine_cc * 3.5
        elif engine_cc <= 2300:
            duty = engine_cc * 4.8
        elif engine_cc <= 3000:
            duty = engine_cc * 5.0
        else:
            duty = engine_cc * 5.7

    # –£—Ç–∏–ª—å—Å–±–æ—Ä
    coeff = 0.17 if age < 3 else 0.26
    util = 3400 * coeff

    # –ù–î–°
    nds = (price_rub + duty + util) * 0.2

    total = price_rub + duty + util + nds

    return {
        "–ö—É—Ä—Å –π–µ–Ω—ã (RUB –∑–∞ 1 JPY)": round(rate, 6),
        "–¶–µ–Ω–∞ –≤ –π–µ–Ω–∞—Ö (JPY)": int(price_yen),
        "–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (RUB)": round(price_rub, 2),
        "–í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ª–µ—Ç)": age,
        "–ü–æ—à–ª–∏–Ω–∞ (RUB)": round(duty, 2),
        "–£—Ç–∏–ª—å—Å–±–æ—Ä (RUB)": round(util, 2),
        "–ù–î–° (RUB)": round(nds, 2),
        "–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ (RUB)": round(total, 2),
    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ (–≤ –π–µ–Ω–∞—Ö):")
    return PRICE

def _parse_int_from_text(text: str) -> int:
    """
    –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ int.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.
    """
    cleaned = re.sub(r"[^\d]", "", text)
    if not cleaned:
        raise ValueError("–ß–∏—Å–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return int(cleaned)

async def price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏
        price = _parse_int_from_text(text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        context.user_data["price"] = price
        await update.message.reply_text("–í–≤–µ–¥–∏ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥ –∏–ª–∏ –ª–∏—Ç—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1.5):")
        return ENGINE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –≤ –π–µ–Ω–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 250000).")
        return PRICE

async def engine_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().replace(",", ".")
    try:
        val = float(text)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á–∏—Å–ª–æ < 10, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ª–∏—Ç—Ä—ã
        if val < 10:
            val *= 1000
        engine_cc = int(round(val))
        if engine_cc <= 50 or engine_cc > 15000:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500) –∏–ª–∏ –≤ –ª–∏—Ç—Ä–∞—Ö (1.5).")
            return ENGINE
        context.user_data["engine"] = engine_cc
        await update.message.reply_text("–í–≤–µ–¥–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2014):")
        return YEAR
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500 –∏–ª–∏ 1.5).")
        return ENGINE

async def year_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    current_year = datetime.now().year
    try:
        year = int(re.sub(r"[^\d]", "", text))
        if year < 1900 or year > current_year:
            await update.message.reply_text(f"‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –º–µ–∂–¥—É 1900 –∏ {current_year}.")
            return YEAR
        context.user_data["year"] = year

        # –†–∞—Å—á—ë—Ç
        data = calc_customs(
            context.user_data["price"],
            context.user_data["engine"],
            context.user_data["year"],
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        lines = [f"{k}: {v}" for k, v in data.items()]
        result_text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞:\n" + "\n".join(lines)
        await update.message.reply_text(result_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º
        try:
            df = pd.DataFrame(list(data.items()), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
            with tempfile.NamedTemporaryFile(prefix="calc_", suffix=".xlsx", delete=False) as tmp:
                tmp_path = tmp.name
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ tmp_path
            df.to_excel(tmp_path, index=False)
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await update.message.reply_document(InputFile(tmp_path))
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ Excel —Ñ–∞–π–ª–∞: %s", e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel-—Ñ–∞–π–ª, –Ω–æ —Ä–∞—Å—á—ë—Ç –ø–æ–∫–∞–∑–∞–Ω –≤—ã—à–µ.")
        finally:
            # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                if 'tmp_path' in locals() and os.path.exists(tmp_path):
                    os.remove(tmp_path)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %s", e)

        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –≥–æ–¥ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2014).")
        return YEAR

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_input)],
            ENGINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, engine_input)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, year_input)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    logger.info("Bot started. –ó–∞–ø—É—Å–∫ –¥–æ–ª–≥–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (polling).")
    app.run_polling()

if __name__ == "__main__":
    main()
